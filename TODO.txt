Drag-and-drop UI:

handle code line overflow -- how? (change layout?)


change font to monospace CHECK

add/remove code lines [ CHECK]
code line numbers [CHECK]

RESTRUCTURE DROP SYSTEM SO:
	drag silhouette always infront  [check]

?scrollable code area - dynamic resize (change layout?) [check]
scrollable piece area - dynamic resize (change layout?) [check]

"limited number" generators [check]
	when lines deleted
	when pieces added/removed

organizable piece area [check]


drop-to-remove-generator area [check]

Make limited number gens display better in blockspace [check]
Only clickable from actual word [check]

variable font size
choose font itself

dynamic piece making feature [sorta check]
	unlimited vs limited blocks [check]
	choose background/text colors



drop position visual cues? [Maybe future work]
internal pieces, next-to relationships [FUTURE WORK]


File system:

Header: what is on there? Save, save as, open , undo, redo,  [check]

File format: [check]
	Contains: generator info, codeline info:

Saving/Loading files via file system

File: file.pyp
Template File: file.pypt
"script" to file.py

Insert in larger file?

Original file preservation? Revert button?


IMPORTNAT: UNDO and REDO Buttons: [check]
	Keep stack of previous versions, also stack for "future recent" versions.
	Every resultive drop action and line deleting sends current version to recent stack, creates new current version from layout, clears "future recent" stack
	UNDO puts current version on stack for "future recent" versions,  pops recent stack and reads it to current layout
	REDO pops "future recent" stack, reads it to current layout, moves current version to recent stack.

Filename displayed at top
"compiling" to python

Nice File Choosing GUI

"Shell" emulator:
Popup?
basic argument /stdin inputs
printing output